/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.kierjohn.testgui;

import javax.swing.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.InvalidPathException;

/**
 * @author LENOVO
 */
public class ReviewerEditorPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReviewerCreationPanel
     */
    public ReviewerEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog = new javax.swing.JDialog();
        controlsPanel = new javax.swing.JPanel();
        questionFormCount = new javax.swing.JLabel();
        clearFormBtn = new javax.swing.JButton();
        addQuestionFormBtn = new javax.swing.JButton();
        qCountLiteralLabel = new javax.swing.JLabel();
        newReviewerBtn = new javax.swing.JButton();
        deleteReviewerBtn = new javax.swing.JButton();
        saveReviewerBtn = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        questionFormContainerPanel = new javax.swing.JPanel();
        reviewerTitleTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        reviewersList = new javax.swing.JList<>();

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
                dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        dialogLayout.setVerticalGroup(
                dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(106, 49, 144));
        setPreferredSize(new java.awt.Dimension(1280, 645));

        controlsPanel.setBackground(new java.awt.Color(106, 49, 144));
        controlsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 51, 255), 1, true));
        controlsPanel.setRequestFocusEnabled(false);

        questionFormCount.setFont(Config.getFont(1, 16)
        );
        questionFormCount.setForeground(new java.awt.Color(250, 242, 249));
        questionFormCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        questionFormCount.setText("0");
        questionFormCount.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        questionFormCount.setVerifyInputWhenFocusTarget(false);

        clearFormBtn.setBackground(new java.awt.Color(204, 255, 204));
        clearFormBtn.setFont(Config.getFont(1, 16)
        );
        clearFormBtn.setText("Clear Reviewer");
        clearFormBtn.setBorder(null);
        clearFormBtn.setBorderPainted(false);
        clearFormBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearFormBtn.setDefaultCapable(false);
        clearFormBtn.setEnabled(false);
        clearFormBtn.setFocusPainted(false);
        clearFormBtn.setFocusable(false);
        clearFormBtn.setName("playQuizBtn"); // NOI18N
        clearFormBtn.setPreferredSize(new java.awt.Dimension(128, 32));
        clearFormBtn.setRequestFocusEnabled(false);
        clearFormBtn.setRolloverEnabled(false);
        clearFormBtn.setVerifyInputWhenFocusTarget(false);
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });

        addQuestionFormBtn.setBackground(new java.awt.Color(204, 255, 204));
        addQuestionFormBtn.setFont(Config.getFont(1, 16)
        );
        addQuestionFormBtn.setText("Add Question");
        addQuestionFormBtn.setBorder(null);
        addQuestionFormBtn.setBorderPainted(false);
        addQuestionFormBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addQuestionFormBtn.setDefaultCapable(false);
        addQuestionFormBtn.setFocusPainted(false);
        addQuestionFormBtn.setFocusable(false);
        addQuestionFormBtn.setName("playQuizBtn"); // NOI18N
        addQuestionFormBtn.setPreferredSize(new java.awt.Dimension(128, 32));
        addQuestionFormBtn.setRequestFocusEnabled(false);
        addQuestionFormBtn.setRolloverEnabled(false);
        addQuestionFormBtn.setVerifyInputWhenFocusTarget(false);
        addQuestionFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestionFormBtnActionPerformed(evt);
            }
        });

        qCountLiteralLabel.setFont(Config.getFont(1, 16)
        );
        qCountLiteralLabel.setForeground(new java.awt.Color(250, 242, 249));
        qCountLiteralLabel.setText("Question Count:");

        newReviewerBtn.setBackground(new java.awt.Color(204, 255, 204));
        newReviewerBtn.setFont(Config.getFont(1, 16)
        );
        newReviewerBtn.setText("New Reviewer");
        newReviewerBtn.setBorder(null);
        newReviewerBtn.setBorderPainted(false);
        newReviewerBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newReviewerBtn.setDefaultCapable(false);
        newReviewerBtn.setFocusPainted(false);
        newReviewerBtn.setFocusable(false);
        newReviewerBtn.setName("playQuizBtn"); // NOI18N
        newReviewerBtn.setPreferredSize(new java.awt.Dimension(128, 32));
        newReviewerBtn.setRequestFocusEnabled(false);
        newReviewerBtn.setRolloverEnabled(false);
        newReviewerBtn.setVerifyInputWhenFocusTarget(false);
        newReviewerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newReviewerBtnActionPerformed(evt);
            }
        });

        deleteReviewerBtn.setBackground(new java.awt.Color(204, 255, 204));
        deleteReviewerBtn.setFont(Config.getFont(1, 16)
        );
        deleteReviewerBtn.setText("Delete Reviewer");
        deleteReviewerBtn.setBorder(null);
        deleteReviewerBtn.setBorderPainted(false);
        deleteReviewerBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteReviewerBtn.setDefaultCapable(false);
        deleteReviewerBtn.setEnabled(false);
        deleteReviewerBtn.setFocusPainted(false);
        deleteReviewerBtn.setFocusable(false);
        deleteReviewerBtn.setName("playQuizBtn"); // NOI18N
        deleteReviewerBtn.setPreferredSize(new java.awt.Dimension(128, 32));
        deleteReviewerBtn.setRequestFocusEnabled(false);
        deleteReviewerBtn.setRolloverEnabled(false);
        deleteReviewerBtn.setVerifyInputWhenFocusTarget(false);
        deleteReviewerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReviewerBtnActionPerformed(evt);
            }
        });

        saveReviewerBtn.setBackground(new java.awt.Color(204, 255, 204));
        saveReviewerBtn.setFont(Config.getFont(1, 16)
        );
        saveReviewerBtn.setText("Save Reviewer");
        saveReviewerBtn.setBorder(null);
        saveReviewerBtn.setBorderPainted(false);
        saveReviewerBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveReviewerBtn.setDefaultCapable(false);
        saveReviewerBtn.setEnabled(false);
        saveReviewerBtn.setFocusPainted(false);
        saveReviewerBtn.setFocusable(false);
        saveReviewerBtn.setName("playQuizBtn"); // NOI18N
        saveReviewerBtn.setPreferredSize(new java.awt.Dimension(128, 32));
        saveReviewerBtn.setRequestFocusEnabled(false);
        saveReviewerBtn.setRolloverEnabled(false);
        saveReviewerBtn.setVerifyInputWhenFocusTarget(false);
        saveReviewerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReviewerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
                controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(saveReviewerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controlsPanelLayout.createSequentialGroup()
                                                .addComponent(qCountLiteralLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(questionFormCount, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(clearFormBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addQuestionFormBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newReviewerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteReviewerBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        controlsPanelLayout.setVerticalGroup(
                controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(addQuestionFormBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newReviewerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clearFormBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveReviewerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteReviewerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(qCountLiteralLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(questionFormCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        jScrollPane.setBorder(null);
        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane.setViewportView(questionFormContainerPanel);
        JScrollBar verticalScrollBar = jScrollPane.getVerticalScrollBar();
        verticalScrollBar.setUnitIncrement(16);
        verticalScrollBar.setPreferredSize(new Dimension(8, 0));

        verticalScrollBar.setBackground(Config.DEFAULT_BG_COLOR);
        verticalScrollBar.setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new java.awt.Color(204, 51, 255);
            }
        });

        questionFormContainerPanel.setBackground(new java.awt.Color(106, 49, 144));
        questionFormContainerPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 51, 255), 1, true));
        questionFormContainerPanel.setFocusable(false);
        questionFormContainerPanel.setRequestFocusEnabled(false);
        questionFormContainerPanel.setVerifyInputWhenFocusTarget(false);
        questionFormContainerPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                questionFormContainerPanelComponentAdded(evt);
            }

            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                questionFormContainerPanelComponentRemoved(evt);
            }
        });
        questionFormContainerPanel.setLayout(new java.awt.GridLayout(0, 1, 8, 0));
        jScrollPane.setViewportView(questionFormContainerPanel);

        reviewerTitleTextField.setBackground(new java.awt.Color(106, 49, 144));
        reviewerTitleTextField.setFont(Config.getFont(0, 25)
        );
        reviewerTitleTextField.setForeground(new java.awt.Color(204, 204, 204));
        reviewerTitleTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        reviewerTitleTextField.setText("Reviewer Name");
        reviewerTitleTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 4, 0, new java.awt.Color(255, 255, 153)));
        reviewerTitleTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                reviewerTitleTextFieldFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                reviewerTitleTextFieldFocusLost(evt);
            }
        });
        reviewerTitleTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                reviewerTitleTextFieldKeyPressed(evt);
            }
        });

        reviewersList.setBackground(new java.awt.Color(106, 49, 144));
        reviewersList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 51, 255), 1, true));
        reviewersList.setFont(Config.getFont(0, 20)
        );
        reviewersList.setForeground(new java.awt.Color(255, 255, 0));
        reviewersList.setModel(Config.reviewersListModel);
        reviewersList.setFocusable(false);
        reviewersList.setRequestFocusEnabled(false);
        reviewersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                reviewersListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(reviewersList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(339, 339, 339)
                                                .addComponent(reviewerTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(304, 304, 304)
                                                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(controlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(141, 141, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(8, Short.MAX_VALUE)
                                .addComponent(reviewerTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1))
                                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        if (hasQuestionForms() && GlobalUtils.isOptionPaneShowYes("Do you want to remove all questions?", "Clear Reviewer")) {
            clearAllForms();
            System.out.println("Cleared the reviewer.");
        }
    }//GEN-LAST:event_clearFormBtnActionPerformed

    protected void clearAllForms() {
        questionFormContainerPanel.removeAll();
    }

    private void addQuestionFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestionFormBtnActionPerformed
        addQuestionForm(new ReviewerQuestionForm(questionFormContainerPanel));
        isReviewerSaved = false;
    }//GEN-LAST:event_addQuestionFormBtnActionPerformed

    private Quiz getQuizFromForm() {
        Quiz quiz = new Quiz(reviewerTitleTextField.getText());
        for (Component comp : questionFormContainerPanel.getComponents()) {
            ReviewerQuestionForm qForm = (ReviewerQuestionForm) comp;
            quiz.add(qForm.getQuestion());
        }
        return quiz;
    }

    private void saveReviewerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReviewerBtnActionPerformed
        if (hasQuestionForms()) {
            Quiz toSaveQuiz = getQuizFromForm();

            try {
                if (isSavedReviewerOpen() && isReviewerChanged()) {
                    isReviewerSaved = GlobalUtils.writeQuizToReviewerDir(toSaveQuiz, reviewersList.getSelectedValue());
                } else {
                    isReviewerSaved = GlobalUtils.writeQuizToChosenFile(toSaveQuiz);
                    setReviewerListSelectedValue(reviewerTitleTextField.getText() + Config.getFileExtension());
                }
            } catch (InvalidPathException e) {
                JOptionPane.showMessageDialog(MainFrame.FRAME, "Invalid reviewer file name!", "Error Saving", JOptionPane.ERROR_MESSAGE);
            }

            if (isReviewerSaved) {
                saveReviewerBtn.setEnabled(false);
                deleteReviewerBtn.setEnabled(true);
            }
        }
    }//GEN-LAST:event_saveReviewerBtnActionPerformed

    private void addQuestionForm(ReviewerQuestionForm qForm) {
        int index = questionFormContainerPanel.getComponentCount();
        qForm.setIndex(index);
        qForm.deleteBtn.addActionListener(this::deletedFormActionPerformed);
        qForm.getQuestionTextField().setCaretPosition(0);
        questionFormContainerPanel.add(qForm);
        questionFormContainerPanel.revalidate();
        questionFormCount.setText(index + 1 + "");
        saveReviewerBtn.setEnabled(true);
        scrollReviewerViewToBottom();
    }

    private void loadSelectedReviewer() {
        loadReviewer(getSelectedReviewer());
    }

    private void loadReviewer(String fileName) {
        try {
            File selectedQuizFile = new File(Config.getReviewerSavesPath(), fileName);
            displayReviewer(GlobalUtils.fileToQuiz(selectedQuizFile));
            isTitleEdited = isReviewerSaved = true;
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(MainFrame.FRAME, "Error loading reviewer file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void displayReviewer(Quiz quiz) {
        questionFormContainerPanel.removeAll();
        reviewerTitleTextField.setText(quiz.getName());
        for (Question question : quiz.getQuestions()) {
            addQuestionForm(new ReviewerQuestionForm(questionFormContainerPanel, question));
        }
        questionFormCount.setText(quiz.size() + "");
        isReviewerSaved = true;
        scrollReviewerViewToTop();
    }

    private void scrollReviewerViewToTop() {
        SwingUtilities.invokeLater(() -> {
            jScrollPane.getVerticalScrollBar().setValue(0);
        });
    }

    private void scrollReviewerViewToBottom() {
        SwingUtilities.invokeLater(() -> {
            JScrollBar vBar = jScrollPane.getVerticalScrollBar();
            vBar.setValue(vBar.getMaximum());
        });
    }

    public void resetSelection() {
        clearAllForms();
        reviewersList.clearSelection();
    }

    private boolean isReviewerChanged() {
        return isReviewerChanged(getSelectedReviewer());
    }

    private boolean isReviewerChanged(String fileName) {
        try {
            if (!isSavedReviewerOpen() || getSelectedReviewer() == null) {
                return false;
            }
            File selectedFile = new File(Config.getReviewerSavesPath(), fileName);
            String orig = GlobalUtils.fileToString(selectedFile);
            return !orig.equalsIgnoreCase(APIHandler.quizToJson(getQuizFromForm()).toString());
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    private static boolean isOptionPaneShowYes() {
        return GlobalUtils.isOptionPaneShowYes("Discard unsaved reviewer?", "Warning");
    }

    private boolean hasQuestionForms() {
        return questionFormContainerPanel.getComponentCount() != 0;
    }

    protected void deletedFormActionPerformed(java.awt.event.ActionEvent evt) {
        JButton deletedBtn = (JButton) evt.getSource();
        ReviewerQuestionForm deletedForm = (ReviewerQuestionForm) deletedBtn.getParent().getParent().getParent();
        int delIndex = deletedForm.getIndex();
        for (int i = delIndex; i < questionFormContainerPanel.getComponentCount(); i++) {
            ReviewerQuestionForm qForm = (ReviewerQuestionForm) questionFormContainerPanel.getComponent(i);
            qForm.setIndex(i - 1);
        }
    }

    protected JTextField getReviewerTitleTextField() {
        return reviewerTitleTextField;
    }

    private void questionFormContainerPanelComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_questionFormContainerPanelComponentRemoved
        questionFormCount.setText(questionFormContainerPanel.getComponentCount() + "");
    }//GEN-LAST:event_questionFormContainerPanelComponentRemoved

    boolean isPreviousReviewerChanged;
    boolean isOverwriteOkayed = true;
    boolean invokeListValueChangeFlag = true;

    private void reviewersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_reviewersListValueChanged
        if (!invokeListValueChangeFlag) return;

        if (evt.getValueIsAdjusting()) {

            if (isSavedReviewerOpen() && isPreviousReviewerChanged) {

                String previousReviewer = reviewersList.getSelectedValue();
                isPreviousReviewerChanged = isReviewerChanged(previousReviewer);
                isOverwriteOkayed = invokeListValueChangeFlag = isOptionPaneShowYes();

                if (isOverwriteOkayed) {
                    loadSelectedReviewer();
                } else {
                    setReviewerListSelectedValue(previousReviewer);
                }

            }

        } else {

            if (((isSavedReviewerOpen() && !isPreviousReviewerChanged) ||
                    (hasQuestionForms() && isReviewerSaved) ||
                    (!hasQuestionForms())) &&
                    getSelectedReviewer() != null &&
                    isOverwriteOkayed) {

                loadSelectedReviewer();
            }
        }

        deleteReviewerBtn.setEnabled(true);
    }//GEN-LAST:event_reviewersListValueChanged

    private void reviewerTitleTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reviewerTitleTextFieldFocusGained
        if (!isTitleEdited) {
            reviewerTitleTextField.setText("");
        }
    }//GEN-LAST:event_reviewerTitleTextFieldFocusGained

    private void newReviewerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newReviewerBtnActionPerformed
        if (((isReviewerChanged() && isOptionPaneShowYes()) || (isReviewerSaved))) {
            resetReviewerEditorView();
        }
    }//GEN-LAST:event_newReviewerBtnActionPerformed

    private void reviewerTitleTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reviewerTitleTextFieldFocusLost
        if (!isTitleEdited) {
            reviewerTitleTextField.setText("Reviewer Name");
        }
    }//GEN-LAST:event_reviewerTitleTextFieldFocusLost

    private void questionFormContainerPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_questionFormContainerPanelComponentAdded
        questionFormCount.setText(questionFormContainerPanel.getComponentCount() + "");
    }//GEN-LAST:event_questionFormContainerPanelComponentAdded

    private void reviewerTitleTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reviewerTitleTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            MainFrame.FRAME.requestFocus();
            reviewerTitleTextFieldFocusLost(null);
        } else if (KeyEvent.getKeyText(evt.getKeyCode()).length() == 1) {
            isTitleEdited = true;
            saveReviewerBtn.setEnabled(true);
        }
    }//GEN-LAST:event_reviewerTitleTextFieldKeyPressed

    private void deleteReviewerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReviewerBtnActionPerformed
        if (GlobalUtils.isOptionPaneShowYes("Are you sure you want to delete this reviewer?", "Delete reviewer")) {
            Config.deleteReviewer(reviewersList.getSelectedValue());
            resetReviewerEditorView();
        }
    }//GEN-LAST:event_deleteReviewerBtnActionPerformed

    private void resetReviewerEditorView() {
        reviewerTitleTextField.setText("Reviewer Name");
        isTitleEdited = false;
        isReviewerSaved = true;
        reviewersList.clearSelection();
        MainFrame.FRAME.requestFocus();
        deleteReviewerBtn.setEnabled(false);
        saveReviewerBtn.setEnabled(false);
        clearAllForms();
    }

    private boolean isSavedReviewerOpen() {
        return reviewersList.getSelectedIndex() != -1;
    }

    private String getSelectedReviewer() {
        return reviewersList.getSelectedValue();
    }

    private void setReviewerListSelectedValue(String fileName) {
        invokeListValueChangeFlag = false;
        SwingUtilities.invokeLater(() -> {
            reviewersList.setSelectedValue(fileName, true);
        });
        invokeListValueChangeFlag = true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addQuestionFormBtn;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JButton deleteReviewerBtn;
    private javax.swing.JDialog dialog;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newReviewerBtn;
    private javax.swing.JLabel qCountLiteralLabel;
    private javax.swing.JPanel questionFormContainerPanel;
    private javax.swing.JLabel questionFormCount;
    protected javax.swing.JTextField reviewerTitleTextField;
    private javax.swing.JList<String> reviewersList;
    private javax.swing.JButton saveReviewerBtn;
    // End of variables declaration//GEN-END:variables

    boolean isTitleEdited = false;
    boolean isReviewerSaved = true;
}
